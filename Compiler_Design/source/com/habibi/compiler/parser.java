
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Nov 30 23:36:14 PST 2004
//----------------------------------------------------

package com.habibi.compiler;

import java_cup.runtime.*;
import java.util.*;
import com.habibi.util.*;

/** CUP v0.10k generated parser.
  * It is a buttom_up parser that use 3 table for parse.
 *  Creates syntax tree of input and if input is correct 
 *  return it to codeGenerator 
 */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\003\006\000\002\004" +
    "\006\000\002\005\004\000\002\006\005\000\002\006\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\004\000\002\014\005\000\002\014\003\000\002" +
    "\015\003\000\002\015\005\000\002\015\004\000\002\055" +
    "\003\000\002\012\004\000\002\016\005\000\002\016\003" +
    "\000\002\017\003\000\002\017\005\000\002\017\004\000" +
    "\002\056\003\000\002\013\004\000\002\020\005\000\002" +
    "\020\003\000\002\021\003\000\002\021\005\000\002\021" +
    "\004\000\002\057\003\000\002\007\005\000\002\007\004" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\006\000\002\025\005\000\002\060\003\000\002" +
    "\026\011\000\002\027\015\000\002\027\015\000\002\036" +
    "\004\000\002\036\004\000\002\036\004\000\002\036\004" +
    "\000\002\030\004\000\002\061\003\000\002\031\011\000" +
    "\002\031\015\000\002\032\006\000\002\037\005\000\002" +
    "\037\003\000\002\037\004\000\002\033\006\000\002\040" +
    "\005\000\002\040\003\000\002\040\004\000\002\054\003" +
    "\000\002\041\005\000\002\041\005\000\002\041\003\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\005\000\002\035\005\000\002\035\003\000\002\045" +
    "\005\000\002\045\003\000\002\046\004\000\002\046\003" +
    "\000\002\047\005\000\002\047\003\000\002\034\005\000" +
    "\002\034\005\000\002\034\003\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\003\000\002\051" +
    "\004\000\002\051\003\000\002\052\005\000\002\052\003" +
    "\000\002\052\003\000\002\052\004\000\002\052\004\000" +
    "\002\052\004\000\002\052\004\000\002\053\003\000\002" +
    "\053\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\004\004\004\001\002\000\004\021\320\001" +
    "\002\000\004\002\317\001\002\000\004\016\007\001\002" +
    "\000\010\010\011\011\020\012\017\001\002\000\004\013" +
    "\315\001\002\000\006\014\303\063\305\001\002\000\004" +
    "\017\301\001\002\000\004\013\ufff9\001\002\000\004\013" +
    "\ufffa\001\002\000\020\005\070\006\057\007\051\025\054" +
    "\027\052\030\067\063\053\001\002\000\004\013\ufffb\001" +
    "\002\000\006\014\035\063\040\001\002\000\006\014\021" +
    "\063\024\001\002\000\004\063\033\001\002\000\004\020" +
    "\030\001\002\000\004\013\ufff1\001\002\000\010\013\uffee" +
    "\015\uffee\020\uffbb\001\002\000\006\013\uffef\015\026\001" +
    "\002\000\006\014\021\063\024\001\002\000\004\013\ufff0" +
    "\001\002\000\004\062\031\001\002\000\006\013\uffeb\015" +
    "\uffeb\001\002\000\006\013\uffed\015\uffed\001\002\000\006" +
    "\013\uffec\015\uffec\001\002\000\004\013\uffea\001\002\000" +
    "\004\063\046\001\002\000\004\020\043\001\002\000\006" +
    "\013\uffe8\015\041\001\002\000\010\013\uffe7\015\uffe7\020" +
    "\uffbb\001\002\000\006\014\035\063\040\001\002\000\004" +
    "\013\uffe9\001\002\000\004\061\044\001\002\000\006\013" +
    "\uffe4\015\uffe4\001\002\000\006\013\uffe6\015\uffe6\001\002" +
    "\000\006\013\uffe5\015\uffe5\001\002\000\004\013\uffe1\001" +
    "\002\000\004\013\uffdb\001\002\000\004\063\300\001\002" +
    "\000\004\021\271\001\002\000\020\020\uffbb\023\uffc6\053" +
    "\uffbb\054\uffbb\055\uffbb\056\uffbb\057\uffbb\001\002\000\004" +
    "\021\257\001\002\000\004\023\255\001\002\000\004\013" +
    "\uffd8\001\002\000\004\021\245\001\002\000\004\017\ufffe" +
    "\001\002\000\004\013\uffda\001\002\000\004\013\uffd9\001" +
    "\002\000\004\013\uffdc\001\002\000\004\013\uffe0\001\002" +
    "\000\004\013\uffde\001\002\000\004\013\243\001\002\000" +
    "\004\021\161\001\002\000\004\021\151\001\002\000\004" +
    "\013\uffdd\001\002\000\016\020\075\053\076\054\073\055" +
    "\100\056\074\057\077\001\002\000\020\021\114\031\107" +
    "\033\111\037\113\060\115\061\106\063\112\001\002\000" +
    "\020\021\114\031\107\033\111\037\113\060\115\061\106" +
    "\063\112\001\002\000\024\021\114\024\142\031\107\033" +
    "\111\037\113\060\115\061\106\063\112\064\145\001\002" +
    "\000\020\021\114\031\107\033\111\037\113\060\115\061" +
    "\106\063\112\001\002\000\020\021\114\031\107\033\111" +
    "\037\113\060\115\061\106\063\112\001\002\000\020\021" +
    "\114\031\107\033\111\037\113\060\115\061\106\063\112" +
    "\001\002\000\006\032\136\034\137\001\002\000\040\013" +
    "\uffa0\014\uffa0\022\uffa0\035\uffa0\036\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051" +
    "\uffa0\052\uffa0\001\002\000\012\013\uffd2\022\uffd2\035\120" +
    "\036\121\001\002\000\040\013\uffa9\014\124\022\uffa9\035" +
    "\uffa9\036\uffa9\041\125\042\123\043\uffa9\044\uffa9\045\uffa9" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\052\uffa9\001\002\000" +
    "\040\013\uffa3\014\uffa3\022\uffa3\035\uffa3\036\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\001\002\000\040\013\uff9a\014\uff9a" +
    "\022\uff9a\035\uff9a\036\uff9a\041\uff9a\042\uff9a\043\uff9a\044" +
    "\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a" +
    "\001\002\000\004\063\134\001\002\000\040\013\uffa5\014" +
    "\uffa5\022\uffa5\035\uffa5\036\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\001\002\000\004\063\134\001\002\000\044\013\uffa1" +
    "\014\uffa1\022\uffa1\032\uffbb\034\uffbb\035\uffa1\036\uffa1\041" +
    "\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\052\uffa1\001\002\000\020\021\114\031" +
    "\107\033\111\037\113\060\115\061\106\063\112\001\002" +
    "\000\020\021\114\031\107\033\111\037\113\060\115\061" +
    "\106\063\112\001\002\000\040\013\uff9b\014\uff9b\022\uff9b" +
    "\035\uff9b\036\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045" +
    "\uff9b\046\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\001\002" +
    "\000\010\022\117\035\120\036\121\001\002\000\040\013" +
    "\uffa2\014\uffa2\022\uffa2\035\uffa2\036\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\052\uffa2\001\002\000\020\021\114\031\107\033\111" +
    "\037\113\060\115\061\106\063\112\001\002\000\020\021" +
    "\114\031\107\033\111\037\113\060\115\061\106\063\112" +
    "\001\002\000\040\013\uffaa\014\124\022\uffaa\035\uffaa\036" +
    "\uffaa\041\125\042\123\043\uffaa\044\uffaa\045\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\052\uffaa\001\002\000\020\021" +
    "\114\031\107\033\111\037\113\060\115\061\106\063\112" +
    "\001\002\000\020\021\114\031\107\033\111\037\113\060" +
    "\115\061\106\063\112\001\002\000\020\021\114\031\107" +
    "\033\111\037\113\060\115\061\106\063\112\001\002\000" +
    "\040\013\uffa7\014\uffa7\022\uffa7\035\uffa7\036\uffa7\041\uffa7" +
    "\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\001\002\000\040\013\uffa8\014\uffa8" +
    "\022\uffa8\035\uffa8\036\uffa8\041\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\001\002\000\040\013\uffa6\014\uffa6\022\uffa6\035\uffa6\036" +
    "\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\052\uffa6\001\002\000\040\013" +
    "\uffab\014\124\022\uffab\035\uffab\036\uffab\041\125\042\123" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\052\uffab\001\002\000\040\013\uffa4\014\uffa4\022\uffa4" +
    "\035\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4\044\uffa4\045" +
    "\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4\001\002" +
    "\000\040\013\uff9c\014\uff9c\022\uff9c\035\uff9c\036\uff9c\041" +
    "\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c" +
    "\050\uff9c\051\uff9c\052\uff9c\001\002\000\062\013\uffbb\014" +
    "\uffbb\015\uffbb\020\uffbb\022\uffbb\032\uffbb\034\uffbb\035\uffbb" +
    "\036\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046" +
    "\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb" +
    "\055\uffbb\056\uffbb\057\uffbb\001\002\000\040\013\uff9e\014" +
    "\uff9e\022\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e\043\uff9e" +
    "\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\001\002\000\040\013\uff9f\014\uff9f\022\uff9f\035\uff9f" +
    "\036\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\001\002\000\040" +
    "\013\uff9d\014\uff9d\022\uff9d\035\uff9d\036\uff9d\041\uff9d\042" +
    "\uff9d\043\uff9d\044\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\001\002\000\012\013\uffd5\022\uffd5\035" +
    "\120\036\121\001\002\000\012\013\uffd4\022\uffd4\035\120" +
    "\036\121\001\002\000\004\063\134\001\002\000\006\013" +
    "\uffd0\022\uffd0\001\002\000\012\013\uffd7\022\uffd7\035\120" +
    "\036\121\001\002\000\006\013\uffcf\022\uffcf\001\002\000" +
    "\006\013\uffd1\022\uffd1\001\002\000\012\013\uffd6\022\uffd6" +
    "\035\120\036\121\001\002\000\012\013\uffd3\022\uffd3\035" +
    "\120\036\121\001\002\000\006\014\152\063\134\001\002" +
    "\000\004\063\160\001\002\000\006\015\156\022\uffc1\001" +
    "\002\000\004\022\155\001\002\000\004\013\uffc3\001\002" +
    "\000\006\014\152\063\134\001\002\000\004\022\uffc2\001" +
    "\002\000\004\022\uffc0\001\002\000\004\063\134\001\002" +
    "\000\004\013\163\001\002\000\022\021\166\031\107\033" +
    "\111\037\113\040\165\060\115\061\106\063\112\001\002" +
    "\000\016\035\120\036\121\043\232\044\234\045\235\046" +
    "\233\001\002\000\022\021\166\031\107\033\111\037\113" +
    "\040\165\060\115\061\106\063\112\001\002\000\022\021" +
    "\166\031\107\033\111\037\113\040\165\060\115\061\106" +
    "\063\112\001\002\000\016\013\uffb8\022\uffb8\047\224\050" +
    "\223\051\uffb8\052\uffb8\001\002\000\012\013\uffac\022\uffac" +
    "\051\uffac\052\uffac\001\002\000\006\013\177\052\200\001" +
    "\002\000\012\013\uffae\022\uffae\051\uffae\052\uffae\001\002" +
    "\000\012\013\uffb0\022\uffb0\051\uffb0\052\uffb0\001\002\000" +
    "\012\013\uffb2\022\uffb2\051\175\052\uffb2\001\002\000\022" +
    "\021\166\031\107\033\111\037\113\040\165\060\115\061" +
    "\106\063\112\001\002\000\012\013\uffb1\022\uffb1\051\uffb1" +
    "\052\uffb1\001\002\000\010\031\206\033\202\063\134\001" +
    "\002\000\022\021\166\031\107\033\111\037\113\040\165" +
    "\060\115\061\106\063\112\001\002\000\012\013\uffb3\022" +
    "\uffb3\051\175\052\uffb3\001\002\000\004\063\134\001\002" +
    "\000\004\022\216\001\002\000\022\020\075\032\214\034" +
    "\215\053\076\054\073\055\100\056\074\057\077\001\002" +
    "\000\004\022\210\001\002\000\004\063\134\001\002\000" +
    "\004\022\uffcb\001\002\000\004\016\211\001\002\000\020" +
    "\005\070\006\057\007\051\025\054\027\052\030\067\063" +
    "\053\001\002\000\004\017\213\001\002\000\004\013\uffcd" +
    "\001\002\000\004\022\uffca\001\002\000\004\022\uffc8\001" +
    "\002\000\004\016\217\001\002\000\020\005\070\006\057" +
    "\007\051\025\054\027\052\030\067\063\053\001\002\000" +
    "\004\017\221\001\002\000\004\013\uffcc\001\002\000\004" +
    "\022\uffc9\001\002\000\020\021\114\031\107\033\111\037" +
    "\113\060\115\061\106\063\112\001\002\000\020\021\114" +
    "\031\107\033\111\037\113\060\115\061\106\063\112\001" +
    "\002\000\012\013\uffba\022\uffba\051\uffba\052\uffba\001\002" +
    "\000\012\013\uffb9\022\uffb9\051\uffb9\052\uffb9\001\002\000" +
    "\020\022\117\035\120\036\121\043\232\044\234\045\235" +
    "\046\233\001\002\000\006\022\231\052\200\001\002\000" +
    "\012\013\uffad\022\uffad\051\uffad\052\uffad\001\002\000\020" +
    "\021\114\031\107\033\111\037\113\060\115\061\106\063" +
    "\112\001\002\000\020\021\114\031\107\033\111\037\113" +
    "\060\115\061\106\063\112\001\002\000\020\021\114\031" +
    "\107\033\111\037\113\060\115\061\106\063\112\001\002" +
    "\000\020\021\114\031\107\033\111\037\113\060\115\061" +
    "\106\063\112\001\002\000\022\013\uffb6\022\uffb6\035\120" +
    "\036\121\047\uffb6\050\uffb6\051\uffb6\052\uffb6\001\002\000" +
    "\022\013\uffb5\022\uffb5\035\120\036\121\047\uffb5\050\uffb5" +
    "\051\uffb5\052\uffb5\001\002\000\022\013\uffb4\022\uffb4\035" +
    "\120\036\121\047\uffb4\050\uffb4\051\uffb4\052\uffb4\001\002" +
    "\000\022\013\uffb7\022\uffb7\035\120\036\121\047\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\001\002\000\012\013\uffaf\022\uffaf" +
    "\051\uffaf\052\uffaf\001\002\000\022\005\070\006\057\007" +
    "\051\017\uffe2\025\054\027\052\030\067\063\053\001\002" +
    "\000\004\017\uffe3\001\002\000\006\014\246\063\134\001" +
    "\002\000\004\063\254\001\002\000\006\015\252\022\uffbd" +
    "\001\002\000\004\022\251\001\002\000\004\013\uffbf\001" +
    "\002\000\006\014\246\063\134\001\002\000\004\022\uffbe" +
    "\001\002\000\004\022\uffbc\001\002\000\020\005\070\006" +
    "\057\007\051\025\054\027\052\030\067\063\134\001\002" +
    "\000\004\013\uffdf\001\002\000\022\021\166\031\107\033" +
    "\111\037\113\040\165\060\115\061\106\063\112\001\002" +
    "\000\006\022\261\052\200\001\002\000\004\016\262\001" +
    "\002\000\020\005\070\006\057\007\051\025\054\027\052" +
    "\030\067\063\053\001\002\000\004\017\264\001\002\000" +
    "\006\013\uffc5\026\265\001\002\000\004\016\266\001\002" +
    "\000\020\005\070\006\057\007\051\025\054\027\052\030" +
    "\067\063\053\001\002\000\004\017\270\001\002\000\004" +
    "\013\uffc4\001\002\000\022\021\166\031\107\033\111\037" +
    "\113\040\165\060\115\061\106\063\112\001\002\000\006" +
    "\022\273\052\200\001\002\000\004\016\274\001\002\000" +
    "\020\005\070\006\057\007\051\025\054\027\052\030\067" +
    "\063\053\001\002\000\004\017\276\001\002\000\004\013" +
    "\uffce\001\002\000\004\013\uffc7\001\002\000\004\013\uffc6" +
    "\001\002\000\004\002\000\001\002\000\006\013\ufff6\015" +
    "\313\001\002\000\004\063\312\001\002\000\004\020\307" +
    "\001\002\000\010\013\ufff5\015\ufff5\020\uffbb\001\002\000" +
    "\004\013\ufff8\001\002\000\004\060\311\001\002\000\006" +
    "\013\ufff4\015\ufff4\001\002\000\006\013\ufff2\015\ufff2\001" +
    "\002\000\006\013\ufff3\015\ufff3\001\002\000\006\014\303" +
    "\063\305\001\002\000\004\013\ufff7\001\002\000\026\005" +
    "\ufffc\006\ufffc\007\ufffc\010\011\011\020\012\017\025\ufffc" +
    "\027\ufffc\030\ufffc\063\ufffc\001\002\000\020\005\ufffd\006" +
    "\ufffd\007\ufffd\025\ufffd\027\ufffd\030\ufffd\063\ufffd\001\002" +
    "\000\004\002\001\001\002\000\004\022\321\001\002\000" +
    "\004\013\322\001\002\000\004\016\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\320\000\006\003\004\004\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\011" +
    "\006\014\010\007\011\015\012\013\013\012\001\001\000" +
    "\002\001\001\000\010\014\305\015\301\054\303\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\057\022\065\023\046\024\063\025\064\026\070" +
    "\027\062\030\047\031\060\032\061\033\055\054\071\061" +
    "\054\001\001\000\002\001\001\000\010\020\033\021\036" +
    "\054\035\001\001\000\010\016\022\017\024\054\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\026\017" +
    "\024\054\021\001\001\000\002\001\001\000\004\056\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\020\041\021" +
    "\036\054\035\001\001\000\002\001\001\000\004\057\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\034\147\050\103\051\107" +
    "\052\104\053\101\054\100\001\001\000\016\034\146\050" +
    "\103\051\107\052\104\053\101\054\100\001\001\000\020" +
    "\034\143\050\103\051\107\052\104\053\101\054\100\060" +
    "\142\001\001\000\016\034\140\050\103\051\107\052\104" +
    "\053\101\054\100\001\001\000\016\034\137\050\103\051" +
    "\107\052\104\053\101\054\100\001\001\000\016\034\102" +
    "\050\103\051\107\052\104\053\101\054\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\134\001\001\000\002\001\001\000\004\054\132\001\001" +
    "\000\002\001\001\000\012\051\131\052\104\053\101\054" +
    "\100\001\001\000\016\034\115\050\103\051\107\052\104" +
    "\053\101\054\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\050\130\051\107\052\104" +
    "\053\101\054\100\001\001\000\014\050\121\051\107\052" +
    "\104\053\101\054\100\001\001\000\002\001\001\000\012" +
    "\051\127\052\104\053\101\054\100\001\001\000\012\051" +
    "\126\052\104\053\101\054\100\001\001\000\012\051\125" +
    "\052\104\053\101\054\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\145\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\037\153\054" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\037\156\054\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\025\161" +
    "\054\071\001\001\000\002\001\001\000\032\034\163\035" +
    "\170\041\167\042\166\045\173\046\172\047\171\050\103" +
    "\051\107\052\104\053\101\054\100\001\001\000\002\001" +
    "\001\000\026\034\163\041\167\042\166\046\241\047\171" +
    "\050\103\051\107\052\104\053\101\054\100\001\001\000" +
    "\032\034\226\035\227\041\167\042\166\045\173\046\172" +
    "\047\171\050\103\051\107\052\104\053\101\054\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\034\163\041\167\042\166\046\175\047\171\050\103" +
    "\051\107\052\104\053\101\054\100\001\001\000\002\001" +
    "\001\000\010\025\202\036\204\054\203\001\001\000\030" +
    "\034\163\041\167\042\166\045\200\046\172\047\171\050" +
    "\103\051\107\052\104\053\101\054\100\001\001\000\002" +
    "\001\001\000\004\054\221\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\054\206\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\007\211\022" +
    "\065\023\046\024\063\025\064\026\070\027\062\030\047" +
    "\031\060\032\061\033\055\054\071\061\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\217\022\065\023" +
    "\046\024\063\025\064\026\070\027\062\030\047\031\060" +
    "\032\061\033\055\054\071\061\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\034\163" +
    "\042\225\050\103\051\107\052\104\053\101\054\100\001" +
    "\001\000\020\034\163\042\224\050\103\051\107\052\104" +
    "\053\101\054\100\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\034\240\050\103\051\107\052\104\053\101\054" +
    "\100\001\001\000\016\034\237\050\103\051\107\052\104" +
    "\053\101\054\100\001\001\000\016\034\236\050\103\051" +
    "\107\052\104\053\101\054\100\001\001\000\016\034\235" +
    "\050\103\051\107\052\104\053\101\054\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\243\022\065\023" +
    "\046\024\063\025\064\026\070\027\062\030\047\031\060" +
    "\032\061\033\055\054\071\061\054\001\001\000\002\001" +
    "\001\000\006\040\247\054\246\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\040\252\054\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\024\255\025\064\026\070\027\062\030" +
    "\047\031\060\032\061\033\055\054\071\001\001\000\002" +
    "\001\001\000\032\034\163\035\257\041\167\042\166\045" +
    "\173\046\172\047\171\050\103\051\107\052\104\053\101" +
    "\054\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\007\262\022\065\023\046\024\063\025\064\026\070" +
    "\027\062\030\047\031\060\032\061\033\055\054\071\061" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\007\266\022\065\023\046\024\063\025" +
    "\064\026\070\027\062\030\047\031\060\032\061\033\055" +
    "\054\071\061\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\034\163\035\271\041\167\042\166\045\173" +
    "\046\172\047\171\050\103\051\107\052\104\053\101\054" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\274\022\065\023\046\024\063\025\064\026\070\027" +
    "\062\030\047\031\060\032\061\033\055\054\071\061\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\055\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\014\313\015" +
    "\301\054\303\001\001\000\002\001\001\000\014\006\315" +
    "\010\007\011\015\012\013\013\012\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



 /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right));
            }
        }
   
        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
        //return null;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // num_const ::= FLOATING_POINT_LITERAL 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.FLOATING_POINT_LITERAL); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*num_const*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // num_const ::= INTEGER_LITERAL 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.INTEGER_LITERAL); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(41/*num_const*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // element ::= PREMINUSMINUS name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PREMINUSMINUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // element ::= name POSTMINUSMINUS 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.POSTMINUSMINUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // element ::= PREPLUSPLUS name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PREPLUSPLUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // element ::= name POSTPLUSPLUS 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.POSTPLUSPLUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // element ::= num_const 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // element ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.IDENTIFIER);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // element ::= LPAREN math_exp RPAREN 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(40/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // factor ::= element 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // factor ::= UNARYMINUS factor 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.UNARYMINUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(39/*factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= factor 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= term MOD factor 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MOD);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // term ::= term DIV factor 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.DIV);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // term ::= term MULT factor 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MULT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(38/*term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // math_exp ::= term 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(26/*math_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // math_exp ::= math_exp MINUS term 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MINUS);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(26/*math_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // math_exp ::= math_exp PLUS term 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PLUS);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(26/*math_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // element3 ::= rel_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(37/*element3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // element3 ::= LPAREN logic_exp RPAREN 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(37/*element3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // element2 ::= element3 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(36/*element2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // element2 ::= NOT element2 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.NOT);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(36/*element2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // element1 ::= element2 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(35/*element1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // element1 ::= element1 AND element2 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.AND);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(35/*element1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // logic_exp ::= element1 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*logic_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // logic_exp ::= logic_exp OR element1 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.OR);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(27/*logic_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // t1 ::= math_exp GTEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.GTEQ);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(32/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // t1 ::= math_exp GT math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.GT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(32/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // t1 ::= math_exp LTEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.LTEQ);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(32/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // t1 ::= math_exp LT math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.LT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(32/*t1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // rel_exp ::= t1 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(31/*rel_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // rel_exp ::= t1 NOTEQ t1 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.NOTEQ);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(31/*rel_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // rel_exp ::= t1 EQEQ t1 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.EQEQ);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(31/*rel_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // name ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.IDENTIFIER);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(42/*name*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // in_list ::= MULT IDENTIFIER 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*in_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // in_list ::= name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.SCANF_STAT);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(30/*in_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // in_list ::= name COMMA in_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.SCANF_STAT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(30/*in_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // scan_stat ::= scanf LPAREN in_list RPAREN 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e1; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*scan_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // out_list ::= MULT IDENTIFIER 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*out_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // out_list ::= name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PRINTF_STAT);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(29/*out_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // out_list ::= name COMMA out_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PRINTF_STAT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(29/*out_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // print_stat ::= printf LPAREN out_list RPAREN 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e1; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*print_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // if_stat ::= IF LPAREN logic_exp RPAREN LBRACE execution_part RBRACE ELSE LBRACE execution_part RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e3 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.IF_ELSE_STAT);node.addChild(e1);node.addChild(e2);node.addChild(e3);
              CUP$parser$result = new java_cup.runtime.Symbol(23/*if_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // if_stat ::= IF LPAREN logic_exp RPAREN LBRACE execution_part RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.IF_STAT);node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(23/*if_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // label ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.IDENTIFIER);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(47/*label*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // goto_stat ::= GOTO label 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.GOTO_STAT);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(22/*goto_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // unary_exp ::= name POSTMINUSMINUS 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.POSTMINUSMINUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(28/*unary_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // unary_exp ::= PREMINUSMINUS name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PREMINUSMINUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(28/*unary_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // unary_exp ::= name POSTPLUSPLUS 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.POSTPLUSPLUS);node.addChild(e1);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(28/*unary_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // unary_exp ::= PREPLUSPLUS name 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PREPLUSPLUS);node.addChild(e1);
              CUP$parser$result = new java_cup.runtime.Symbol(28/*unary_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // for_stat ::= FOR LPAREN assign_stat SEMICOLON logic_exp SEMICOLON assign_stat RPAREN LBRACE execution_part RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeInterface e3 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e4 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.FOR_STAT);node.addChild(e1); node.addChild(e2);node.addChild(e3);node.addChild(e4);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // for_stat ::= FOR LPAREN assign_stat SEMICOLON logic_exp SEMICOLON unary_exp RPAREN LBRACE execution_part RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeInterface e3 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e4 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.FOR_STAT);node.addChild(e1); node.addChild(e2);node.addChild(e3);node.addChild(e4);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(21/*for_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // while_stat ::= WHILE LPAREN logic_exp RPAREN LBRACE execution_part RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		NodeInterface node=new Node(sym.WHILE_STAT);node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(20/*while_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // s_l ::= STRING_LITERAL 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.STRING_LITERAL);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(46/*s_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // assign_stat ::= name EQ s_l 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.EQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assign_stat ::= name EQ NUMBERSIGN name 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign_stat ::= name MODEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MODEQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign_stat ::= name DIVEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.DIVEQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assign_stat ::= name MULTEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MULTEQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // assign_stat ::= name MINUSEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.MINUSEQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // assign_stat ::= name PLUSEQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.PLUSEQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // assign_stat ::= name EQ math_exp 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.EQ );node.addChild(e1); node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(19/*assign_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // unlabeled_stat ::= scan_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // unlabeled_stat ::= print_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // unlabeled_stat ::= if_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // unlabeled_stat ::= goto_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // unlabeled_stat ::= for_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // unlabeled_stat ::= while_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // unlabeled_stat ::= assign_stat 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.ASSIGN_STAT); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(18/*unlabeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // labeled_stat ::= label COLON unlabeled_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.LABELED_STAT);node.addChild(e1);node.addChild(e2);
              CUP$parser$result = new java_cup.runtime.Symbol(17/*labeled_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stat ::= unlabeled_stat 
            {
              NodeInterface RESULT = null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e2;
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stat ::= labeled_stat 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(16/*stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // execution_part ::= stat SEMICOLON 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*execution_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // execution_part ::= stat SEMICOLON execution_part 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.EXECUTION_PART);node.addChild(e1);node.addChild(e2);
              CUP$parser$result = new java_cup.runtime.Symbol(5/*execution_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // f_p_l ::= FLOATING_POINT_LITERAL 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.FLOATING_POINT_LITERAL);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(45/*f_p_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // f_list ::= MULT IDENTIFIER 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*f_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // f_list ::= name EQ f_p_l 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.F_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*f_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // f_list ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.IDENTIFIER); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(15/*f_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // float_list ::= f_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*float_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // float_list ::= f_list COMMA float_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.FLOAT_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(14/*float_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // dcl_float ::= FLOAT float_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*dcl_float*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // c_l ::= CHARACTER_LITERAL 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.CHARACTER_LITERAL); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(44/*c_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // c_list ::= MULT IDENTIFIER 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*c_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // c_list ::= name EQ c_l 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.C_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*c_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // c_list ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.IDENTIFIER); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(13/*c_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // char_list ::= c_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(12/*char_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // char_list ::= c_list COMMA char_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.CHAR_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(12/*char_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dcl_char ::= CHAR char_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*dcl_char*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // i_l ::= INTEGER_LITERAL 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.INTEGER_LITERAL); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(43/*i_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // i_list ::= MULT IDENTIFIER 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*i_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // i_list ::= name EQ i_l 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.I_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*i_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // i_list ::= IDENTIFIER 
            {
              NodeInterface RESULT = null;
		NodeInterface node=new Node(sym.IDENTIFIER); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*i_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // int_list ::= i_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*int_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // int_list ::= i_list COMMA int_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.INT_LIST); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*int_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dcl_int ::= INT int_list 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*dcl_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dcl_stat ::= dcl_float 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*dcl_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dcl_stat ::= dcl_char 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*dcl_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dcl_stat ::= dcl_int 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*dcl_stat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dcl_part ::= dcl_stat SEMICOLON 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*dcl_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dcl_part ::= dcl_stat SEMICOLON dcl_part 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.DCL_PART); node.addChild(e1); node.addChild(e2); RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(4/*dcl_part*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // body ::= dcl_part execution_part 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		NodeInterface e2 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		NodeInterface node=new Node(sym.BODY); node.addChild(e1);node.addChild(e2);RESULT=node;
              CUP$parser$result = new java_cup.runtime.Symbol(3/*body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // head ::= main LPAREN RPAREN SEMICOLON 
            {
              NodeInterface RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*head*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= head LBRACE body RBRACE 
            {
              NodeInterface RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface e1 = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e1;
              CUP$parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodeInterface start_val = (NodeInterface)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

